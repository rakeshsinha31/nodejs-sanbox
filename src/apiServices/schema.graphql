type Query {
    account(id: ID!): [Account!]
    accounts: [Account]!

}
type Mutation {
  createCustomerAccount(
    role: String!, username: String!, password: String!, firstName: String, lastName: String): Account!,
    updateCustomerAccount(
      id: ID!, role: String, username: String, firstName: String, lastName: String): Boolean!
}

enum AccountRole {
  ADMIN
  CUSTOMERfi
  VENDOR
}
interface Account {
  id: ID!
  role: AccountRole!
  username: String!
  firstName: String
  lastName: String
}
type AdminAccount implements Account {
  id: ID!
  role: AccountRole!
  username: String!
  firstName: String
  lastName: String
}
type VendorAccount implements Account {
  id: ID!
  role: AccountRole!
  username: String!
  firstName: String
  lastName: String
}
type CustomerAccount implements Account {
  id: ID!
  role: AccountRole!
  username: String!
  firstName: String
  lastName: String
}